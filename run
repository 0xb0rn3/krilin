#!/usr/bin/env bash

# ╔══════════════════════════════════════════════════════════════╗
# ║                                                              ║
# ║   KRILIN v0.2 - Stable Environment Setup                     ║
# ║   Weaponize Your Debian System with Kali Linux Arsenal       ║
# ║                                                              ║
# ╚══════════════════════════════════════════════════════════════╝

# Color and style codes
RED='\033[91m'
GREEN='\033[92m'
YELLOW='\033[93m'
BLUE='\033[94m'
MAGENTA='\033[95m'
CYAN='\033[96m'
BOLD='\033[1m'
NORMAL='\033[0m'

# Spinner animation function
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar function
progress_bar() {
    local duration=$1
    local width=50
    local progress=0
    local fill_char="▓"
    local empty_char="░"
    
    echo -ne "\n"
    while [ $progress -lt 100 ]; do
        local current_progress=$((progress * width / 100))
        local remaining=$((width - current_progress))
        
        # Create the bar with appropriate colored segments
        local bar=""
        for ((i=0; i<current_progress; i++)); do
            bar="${bar}${GREEN}${fill_char}${NORMAL}"
        done
        for ((i=0; i<remaining; i++)); do
            bar="${bar}${CYAN}${empty_char}${NORMAL}"
        done
        
        # Print the progress bar
        echo -ne "\r[${bar}] ${progress}%"
        
        # Increment progress
        progress=$((progress + 1))
        sleep $((duration / 100))
    done
    echo -ne "\n\n"
}

# Check root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}${BOLD}[!] This script must be run as root.${NORMAL}\n"
        echo -e "${YELLOW}${BOLD}[!] Please run with:${NORMAL} sudo ./run"
        exit 1
    fi
}

# Print banner
print_banner() {
    clear
    echo -e "${BLUE}${BOLD}╔══════════════════════════════════════════════════════════════════════╗${NORMAL}"
    echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}██╗  ██╗${RED}██████╗ ${YELLOW}██╗${GREEN}██╗     ${BLUE}██╗${MAGENTA}███╗   ██╗${WHITE}   ${CYAN}v1.2.0${BLUE}        ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}██║ ██╔╝${RED}██╔══██╗${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}████╗  ██║${BLUE}                 ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}█████╔╝ ${RED}██████╔╝${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}██╔██╗ ██║${BLUE}                 ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}██╔═██╗ ${RED}██╔══██╗${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}██║╚██╗██║${BLUE}                 ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}██║  ██╗${RED}██║  ██║${YELLOW}██║${GREEN}███████╗${BLUE}██║${MAGENTA}██║ ╚████║${BLUE}                 ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${CYAN}╚═╝  ╚═╝${RED}╚═╝  ╚═╝${YELLOW}╚═╝${GREEN}╚══════╝${BLUE}╚═╝${MAGENTA}╚═╝  ╚═══╝${BLUE}                 ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}╠══════════════════════════════════════════════════════════════════════╣${NORMAL}"
    echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${GREEN}KRILIN - Advanced Debian Security Weaponization Platform${BLUE}          ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${YELLOW}⚡ ${WHITE}Built by ${CYAN}0xb0rn3 ${WHITE}| Maintained by ${CYAN}Team SecVulnHub${BLUE}               ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║   ${YELLOW}⚙️ ${WHITE}${ITALIC}\"Transform your Debian system into a security powerhouse\"${BLUE}      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
    echo -e "${BLUE}${BOLD}╚══════════════════════════════════════════════════════════════════════╝${NORMAL}"
    echo
    echo -e "${CYAN}${BOLD}[*] Creating stable environment for Krilin...${NORMAL}"
    echo -e "${CYAN}${BOLD}[*] Starting system assessment...${NORMAL}"
    echo
}

# Check and update git repository
check_git_repo() {
    echo -e "${CYAN}${BOLD}[*] Checking for repository updates...${NORMAL}"
    
    # Check if git directory exists
    if [ ! -d ".git" ]; then
        echo -e "${YELLOW}${BOLD}[!] Not in a git repository. Checking for krilin folder...${NORMAL}"
        
        # Check if krilin directory exists, if not, clone it
        if [ ! -d "krilin" ]; then
            echo -e "${CYAN}${BOLD}[*] Cloning Krilin repository...${NORMAL}"
            git clone https://github.com/0xb0rn3/krilin.git &
            spinner $!
            echo -e "${GREEN}[+] Repository cloned successfully.${NORMAL}"
            cd krilin
        else
            echo -e "${GREEN}[+] Krilin directory found.${NORMAL}"
            cd krilin
            
            # If it's a git repository, pull latest changes
            if [ -d ".git" ]; then
                echo -e "${CYAN}${BOLD}[*] Pulling latest changes...${NORMAL}"
                git pull &
                spinner $!
                echo -e "${GREEN}[+] Repository updated successfully.${NORMAL}"
            fi
        fi
    else
        # Pull latest changes
        echo -e "${CYAN}${BOLD}[*] Pulling latest changes...${NORMAL}"
        git pull &
        spinner $!
        echo -e "${GREEN}[+] Repository updated successfully.${NORMAL}"
    fi
}

# Install required system dependencies
install_dependencies() {
    echo -e "${CYAN}${BOLD}[*] Installing system dependencies...${NORMAL}"
    
    # List of required packages
    PACKAGES=(
        "python3" 
        "python3-pip" 
        "python3-venv" 
        "python3-requests" 
        "python3-bs4" 
        "wget" 
        "apt-transport-https" 
        "gnupg" 
        "dpkg-dev"
        "lsb-release"
        "software-properties-common"
    )
    
    # Update package list
    apt-get update -qq &
    spinner $!
    
    # Install packages
    for pkg in "${PACKAGES[@]}"; do
        # Check if package is already installed
        if ! dpkg -s "$pkg" >/dev/null 2>&1; then
            echo -e "${YELLOW}[>] Installing ${pkg}...${NORMAL}"
            apt-get install -y -qq "$pkg" >/dev/null 2>&1 &
            spinner $!
            echo -e "${GREEN}[+] ${pkg} installed.${NORMAL}"
        else
            echo -e "${GREEN}[+] ${pkg} already installed.${NORMAL}"
        fi
    done
    
    # Setup Python environment
    echo -e "${CYAN}${BOLD}[*] Setting up Python environment...${NORMAL}"
    
    # Install pip packages
    PIP_PACKAGES=(
        "requests" 
        "beautifulsoup4"
    )
    
    for pip_pkg in "${PIP_PACKAGES[@]}"; do
        echo -e "${YELLOW}[>] Installing ${pip_pkg}...${NORMAL}"
        python3 -m pip install --break-system-packages "$pip_pkg" >/dev/null 2>&1 &
        spinner $!
        echo -e "${GREEN}[+] ${pip_pkg} installed.${NORMAL}"
    done
    
    echo -e "${GREEN}${BOLD}[+] All dependencies installed successfully.${NORMAL}"
}

# Display README in elegant format
display_readme() {
    echo -e "${CYAN}${BOLD}[*] Displaying Krilin overview...${NORMAL}\n"
    
    # Check if README.md exists
    if [ -f "README.md" ]; then
        # Extract title
        TITLE=$(grep -m 1 "# " README.md | sed 's/# //')
        
        # Extract description
        DESCRIPTION=$(grep -m 1 "<h3>" README.md | sed 's/<h3>//;s/<\/h3>//')
        
        # Extract features
        FEATURES=$(sed -n '/## ✨ Features/,/## /p' README.md | grep '^\- ' | sed 's/^\- //')
        
        # Print formatted README
        echo -e "${BLUE}════════════════════════════════════════════════════════════════${NORMAL}"
        echo -e "${BOLD}${MAGENTA}  ${TITLE}${NORMAL}"
        echo -e "${YELLOW}  ${DESCRIPTION}${NORMAL}"
        echo -e "${BLUE}════════════════════════════════════════════════════════════════${NORMAL}\n"
        
        echo -e "${BOLD}${GREEN}🔥 Features:${NORMAL}\n"
        
        # Print each feature
        echo "$FEATURES" | while IFS= read -r line; do
            # Extract the emoji if present
            EMOJI=$(echo "$line" | grep -o '^\S\+' || echo "•")
            TEXT=$(echo "$line" | sed 's/^\S\+//')
            
            echo -e "  ${CYAN}${EMOJI}${GREEN}${TEXT}${NORMAL}"
        done
        
        echo -e "\n${BLUE}════════════════════════════════════════════════════════════════${NORMAL}\n"
    else
        echo -e "${YELLOW}${BOLD}[!] README.md not found. Continuing...${NORMAL}"
    fi
}

# Run Krilin script
run_krilin() {
    echo -e "${CYAN}${BOLD}[*] Preparing to launch Krilin...${NORMAL}"
    
    # Make the script executable
    chmod +x krilin
    
    # Execute the script
    echo -e "${GREEN}${BOLD}[+] Launching Krilin.${NORMAL}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NORMAL}"
    
    # Execute krilin script
    python3 core.py
    
    # Return code
    RC=$?
    
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NORMAL}"
    
    if [ $RC -eq 0 ]; then
        echo -e "${GREEN}${BOLD}[+] Krilin executed successfully.${NORMAL}"
    else
        echo -e "${RED}${BOLD}[!] Krilin execution failed with return code ${RC}.${NORMAL}"
    fi
}

# Handle signals for clean exit
trap 'echo -e "\n${RED}${BOLD}[!] Execution interrupted. Cleaning up...${NORMAL}"; exit 1' INT TERM

# Main function
main() {
    # Check root privileges
    check_root
    
    # Print banner
    print_banner
    
    # Simulate loading
    echo -e "${CYAN}${BOLD}[*] Initializing environment...${NORMAL}"
    progress_bar 2
    
    # Check git repository
    check_git_repo
    
    # Install dependencies
    install_dependencies
    
    # Display README
    display_readme
    
    # Run Krilin
    run_krilin
    
    echo -e "\n${GREEN}${BOLD}[+] Krilin setup completed.${NORMAL}"
}

# Execute main function
main "$@"
