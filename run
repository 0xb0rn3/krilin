#!/usr/bin/env bash

# ╔══════════════════════════════════════════════════════════════════════╗
# ║                                                                      ║
# ║   KRILIN v0.2. - Security Framework                                 ║
# ║   Weaponize Your Debian System with Advanced Security Arsenal        ║
# ║                                                                      ║
# ╚══════════════════════════════════════════════════════════════════════╝

# Color and style codes
RED='\033[91m'
GREEN='\033[92m'
YELLOW='\033[93m'
BLUE='\033[94m'
MAGENTA='\033[95m'
CYAN='\033[96m'
WHITE='\033[97m'
BOLD='\033[1m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
BLINK='\033[5m'
NORMAL='\033[0m'

# Spinner animation function with improved visuals
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='⣾⣽⣻⢿⡿⣟⣯⣷'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " ${CYAN}${BOLD}[%c]${NORMAL}  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar function with improved visuals
progress_bar() {
    local duration=$1
    local width=50
    local progress=0
    local fill_char="█"
    local empty_char="░"
    
    echo -ne "\n"
    while [ $progress -lt 100 ]; do
        local current_progress=$((progress * width / 100))
        local remaining=$((width - current_progress))
        
        # Create color gradient for progress bar
        local bar=""
        for ((i=0; i<current_progress; i++)); do
            if [ $i -lt $((width / 3)) ]; then
                bar="${bar}${CYAN}${fill_char}${NORMAL}"
            elif [ $i -lt $((width * 2 / 3)) ]; then
                bar="${bar}${BLUE}${fill_char}${NORMAL}"
            else
                bar="${bar}${MAGENTA}${fill_char}${NORMAL}"
            fi
        done
        for ((i=0; i<remaining; i++)); do
            bar="${bar}${BLUE}${empty_char}${NORMAL}"
        done
        
        # Print the progress bar with percentage
        echo -ne "\r${YELLOW}${BOLD}[${NORMAL}${bar}${YELLOW}${BOLD}]${NORMAL} ${CYAN}${BOLD}${progress}%${NORMAL}"
        
        # Increment progress with variable speed for more realistic feel
        progress=$((progress + (RANDOM % 3 + 1)))
        if [ $progress -gt 100 ]; then
            progress=100
        fi
        sleep $(echo "scale=3; ($duration / 100) * (0.5 + (0.5 * $RANDOM / 32767))" | bc)
    done
    echo -ne "\n\n"
}

# Check root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}${BOLD}[!] This script must be run as root.${NORMAL}\n"
        echo -e "${YELLOW}${BOLD}[!] Please run with:${NORMAL} sudo ./run"
        exit 1
    fi
}

# Print banner with improved ASCII art and animation
print_banner() {
    clear
    # Terminal size-aware banner (will adapt to smaller terminals)
    local term_width=$(tput cols)
    local min_width=80
    
    # Use standard size if terminal is big enough, otherwise adjust
    if [ "$term_width" -ge "$min_width" ]; then
        echo -e "${BLUE}${BOLD}╔══════════════════════════════════════════════════════════════════════╗${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}██╗  ██╗${RED}██████╗ ${YELLOW}██╗${GREEN}██╗     ${BLUE}██╗${MAGENTA}███╗   ██╗${BLUE}                 ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}██║ ██╔╝${RED}██╔══██╗${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}████╗  ██║${CYAN}   v0.2.${BLUE}        ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}█████╔╝ ${RED}██████╔╝${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}██╔██╗ ██║${BLUE}                 ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}██╔═██╗ ${RED}██╔══██╗${YELLOW}██║${GREEN}██║     ${BLUE}██║${MAGENTA}██║╚██╗██║${BLUE}                 ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}██║  ██╗${RED}██║  ██║${YELLOW}██║${GREEN}███████╗${BLUE}██║${MAGENTA}██║ ╚████║${BLUE}                 ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}╚═╝  ╚═╝${RED}╚═╝  ╚═╝${YELLOW}╚═╝${GREEN}╚══════╝${BLUE}╚═╝${MAGENTA}╚═╝  ╚═══╝${BLUE}                 ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}╠══════════════════════════════════════════════════════════════════════╣${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${GREEN}${BOLD}KRILIN - Advanced Debian Security Weaponization Platform${BLUE}          ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${YELLOW}⚡ ${WHITE}Built by ${CYAN}0xb0rn3 ${WHITE}| Maintained by ${CYAN}Team SecVulnHub${BLUE}               ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${YELLOW}⚙️  ${WHITE}${ITALIC}\"Transform your Debian system into a security powerhouse\"${BLUE}      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                                                      ║${NORMAL}"
        echo -e "${BLUE}${BOLD}╚══════════════════════════════════════════════════════════════════════╝${NORMAL}"
    else
        # Simplified banner for smaller terminals
        echo -e "${BLUE}${BOLD}╔════════════════════════════════════════════╗${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                            ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${CYAN}K${RED}R${YELLOW}I${GREEN}L${BLUE}I${MAGENTA}N${CYAN} Security Framework ${BLUE}v1.2.0   ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║                                            ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${GREEN}${BOLD}Debian Security Platform${BLUE}            ║${NORMAL}"
        echo -e "${BLUE}${BOLD}║   ${WHITE}By ${CYAN}Team SecVulnHub${BLUE}                  ║${NORMAL}"
        echo -e "${BLUE}${BOLD}╚════════════════════════════════════════════╝${NORMAL}"
    fi
    
    echo
    # Animated status messages
    for i in {1..3}; do
        echo -ne "${CYAN}${BOLD}[*] Initializing Krilin components...${NORMAL}\r"
        sleep 0.3
        echo -ne "${CYAN}${BOLD}[*] Initializing Krilin components.  ${NORMAL}\r"
        sleep 0.3
        echo -ne "${CYAN}${BOLD}[*] Initializing Krilin components.. ${NORMAL}\r"
        sleep 0.3
        echo -ne "${CYAN}${BOLD}[*] Initializing Krilin components...${NORMAL}\r"
        sleep 0.3
    done
    echo -e "${CYAN}${BOLD}[*] Initializing Krilin components...${NORMAL} ${GREEN}${BOLD}Done!${NORMAL}"
    echo -e "${CYAN}${BOLD}[*] Starting system assessment...${NORMAL}"
    echo
}

# Enhanced repository check and update with conflict resolution
check_git_repo() {
    echo -e "${CYAN}${BOLD}[*] Checking for repository updates...${NORMAL}"
    
    # Check if git directory exists
    if [ ! -d ".git" ]; then
        echo -e "${YELLOW}${BOLD}[!] Not in a git repository. Checking for krilin folder...${NORMAL}"
        
        # Check if krilin directory exists, if not, clone it
        if [ ! -d "krilin" ]; then
            echo -e "${CYAN}${BOLD}[*] Cloning Krilin repository...${NORMAL}"
            git clone https://github.com/0xb0rn3/krilin.git
            echo -e "${GREEN}${BOLD}[+] Repository cloned successfully.${NORMAL}"
            cd krilin || { 
                echo -e "${RED}${BOLD}[!] Failed to enter krilin directory.${NORMAL}"
                exit 1
            }
        else
            echo -e "${GREEN}${BOLD}[+] Krilin directory found.${NORMAL}"
            cd krilin || { 
                echo -e "${RED}${BOLD}[!] Failed to enter krilin directory.${NORMAL}"
                exit 1
            }
            
            # If it's a git repository, handle updates with potential conflicts
            if [ -d ".git" ]; then
                handle_git_updates
            fi
        fi
    else
        # Handle updates with potential conflicts
        handle_git_updates
    fi
}

# Handle git updates with conflict resolution
handle_git_updates() {
    echo -e "${CYAN}${BOLD}[*] Preparing to update repository...${NORMAL}"
    
    # Check for local changes
    if ! git diff --quiet HEAD; then
        echo -e "${YELLOW}${BOLD}[!] Local changes detected that might conflict with updates.${NORMAL}"
        
        # Create a backup of the run script if it exists and has changes
        if [ -f "run" ] && ! git diff --quiet HEAD -- run; then
            echo -e "${CYAN}${BOLD}[*] Creating backup of your customized run script...${NORMAL}"
            cp run run.backup.$(date +%Y%m%d%H%M%S)
            echo -e "${GREEN}${BOLD}[+] Backup created successfully.${NORMAL}"
        fi
        
        # Stash changes to allow pulling updates
        echo -e "${CYAN}${BOLD}[*] Temporarily saving your local changes...${NORMAL}"
        git stash save "Automatic stash before updating Krilin"
        
        # Pull latest changes
        echo -e "${CYAN}${BOLD}[*] Pulling latest changes from repository...${NORMAL}"
        if git pull origin main --no-edit; then
            echo -e "${GREEN}${BOLD}[+] Repository updated successfully.${NORMAL}"
            
            # Try to apply stashed changes back
            echo -e "${CYAN}${BOLD}[*] Attempting to restore your customizations...${NORMAL}"
            
            # Check if there are stashes to apply
            if git stash list | grep -q "Automatic stash"; then
                if git stash pop; then
                    echo -e "${GREEN}${BOLD}[+] Your customizations were successfully restored.${NORMAL}"
                else
                    echo -e "${YELLOW}${BOLD}[!] Conflicts occurred when restoring your customizations.${NORMAL}"
                    echo -e "${YELLOW}${BOLD}[!] Your changes are saved in the git stash.${NORMAL}"
                    echo -e "${YELLOW}${BOLD}[!] You can view them later with 'git stash list' and 'git stash show'.${NORMAL}"
                    
                    # If run script had conflicts, restore from backup
                    if [ -f "run.backup."* ]; then
                        LATEST_BACKUP=$(ls -t run.backup.* | head -1)
                        echo -e "${CYAN}${BOLD}[*] Restoring run script from backup: ${LATEST_BACKUP}${NORMAL}"
                        cp "$LATEST_BACKUP" run
                        chmod +x run
                        echo -e "${GREEN}${BOLD}[+] Run script restored from backup.${NORMAL}"
                    fi
                fi
            fi
        else
            echo -e "${RED}${BOLD}[!] Failed to update repository.${NORMAL}"
            # Try to restore stashed changes if update failed
            if git stash list | grep -q "Automatic stash"; then
                echo -e "${CYAN}${BOLD}[*] Restoring your previous state...${NORMAL}"
                git stash pop
                echo -e "${GREEN}${BOLD}[+] Previous state restored.${NORMAL}"
            fi
        fi
    else
        # No local changes, safe to update
        echo -e "${CYAN}${BOLD}[*] Pulling latest changes...${NORMAL}"
        if git pull origin main --no-edit; then
            echo -e "${GREEN}${BOLD}[+] Repository updated successfully.${NORMAL}"
        else
            echo -e "${RED}${BOLD}[!] Update failed. Please check your network connection.${NORMAL}"
        fi
    fi
}

# Install required system dependencies with better error handling
install_dependencies() {
    echo -e "${CYAN}${BOLD}[*] Installing system dependencies...${NORMAL}"
    
    # List of required packages with categorization
    declare -A PACKAGE_CATEGORIES
    PACKAGE_CATEGORIES=(
        ["System"]="apt-transport-https gnupg dpkg-dev lsb-release software-properties-common curl wget"
        ["Python"]="python3 python3-pip python3-venv python3-requests python3-bs4"
        ["Development"]="build-essential git make autoconf"
        ["Networking"]="nmap netcat-openbsd net-tools"
    )
    
    # Update package list with better error handling
    echo -e "${YELLOW}[>] Updating package lists...${NORMAL}"
    if apt-get update -qq; then
        echo -e "${GREEN}[+] Package lists updated.${NORMAL}"
    else
        echo -e "${RED}${BOLD}[!] Failed to update package lists. Continuing anyway...${NORMAL}"
    fi
    
    # Install packages by category
    for category in "${!PACKAGE_CATEGORIES[@]}"; do
        echo -e "${BLUE}${BOLD}[+] Installing ${category} packages:${NORMAL}"
        
        # Get packages for this category
        PACKAGES=(${PACKAGE_CATEGORIES[$category]})
        
        for pkg in "${PACKAGES[@]}"; do
            # Check if package is already installed
            if ! dpkg -s "$pkg" >/dev/null 2>&1; then
                echo -ne "${YELLOW}[>] Installing ${pkg}...${NORMAL}"
                if apt-get install -y -qq "$pkg" >/dev/null 2>&1; then
                    echo -e "\r${GREEN}[+] ${pkg} installed.     ${NORMAL}"
                else
                    echo -e "\r${RED}[!] Failed to install ${pkg}. ${NORMAL}"
                fi
            else
                echo -e "${GREEN}[+] ${pkg} already installed.${NORMAL}"
            fi
        done
    done
    
    # Setup Python environment with virtual environment support
    echo -e "${CYAN}${BOLD}[*] Setting up Python environment...${NORMAL}"
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        echo -e "${YELLOW}[>] Creating virtual environment...${NORMAL}"
        python3 -m venv venv
        echo -e "${GREEN}[+] Virtual environment created.${NORMAL}"
    fi
    
    # Install pip packages (both system-wide and in venv for flexibility)
    PIP_PACKAGES=(
        "requests" 
        "beautifulsoup4"
        "colorama"
        "rich"
    )
    
    echo -e "${YELLOW}[>] Installing Python packages...${NORMAL}"
    for pip_pkg in "${PIP_PACKAGES[@]}"; do
        echo -ne "${YELLOW}[>] Installing ${pip_pkg}...${NORMAL}"
        if python3 -m pip install --break-system-packages "$pip_pkg" >/dev/null 2>&1; then
            echo -e "\r${GREEN}[+] ${pip_pkg} installed.     ${NORMAL}"
        else
            echo -e "\r${RED}[!] Failed to install ${pip_pkg}. ${NORMAL}"
        fi
    done
    
    echo -e "${GREEN}${BOLD}[+] All dependencies installed successfully.${NORMAL}"
}

# Display README in elegant format with animated sections
display_readme() {
    echo -e "${CYAN}${BOLD}[*] Loading Krilin overview...${NORMAL}\n"
    sleep 1
    
    # Check if README.md exists
    if [ -f "README.md" ]; then
        # Extract title
        TITLE=$(grep -m 1 "# " README.md | sed 's/# //')
        
        # Extract description
        DESCRIPTION=$(grep -m 1 "<h3>" README.md | sed 's/<h3>//;s/<\/h3>//')
        
        # Extract features
        FEATURES=$(sed -n '/## ✨ Features/,/## /p' README.md | grep '^\- ' | sed 's/^\- //')
        
        # Print formatted README with animated border
        echo -ne "${BLUE}"
        for i in $(seq 1 70); do
            echo -ne "═"
            sleep 0.005
        done
        echo -ne "${NORMAL}\n"
        
        echo -e "${BOLD}${MAGENTA}  ${TITLE}${NORMAL}"
        echo -e "${YELLOW}  ${DESCRIPTION}${NORMAL}"
        
        echo -ne "${BLUE}"
        for i in $(seq 1 70); do
            echo -ne "═"
            sleep 0.005
        done
        echo -ne "${NORMAL}\n\n"
        
        echo -e "${BOLD}${GREEN}🔥 Features:${NORMAL}\n"
        
        # Print each feature with a small delay for animation effect
        echo "$FEATURES" | while IFS= read -r line; do
            # Extract the emoji if present
            EMOJI=$(echo "$line" | grep -o '^\S\+' || echo "•")
            TEXT=$(echo "$line" | sed 's/^\S\+//')
            
            echo -e "  ${CYAN}${EMOJI}${GREEN}${TEXT}${NORMAL}"
            sleep 0.1
        done
        
        echo -ne "\n${BLUE}"
        for i in $(seq 1 70); do
            echo -ne "═"
            sleep 0.005
        done
        echo -ne "${NORMAL}\n\n"
    else
        echo -e "${YELLOW}${BOLD}[!] README.md not found. Continuing...${NORMAL}"
    fi
}

# Check for core.py and execute it
run_krilin() {
    echo -e "${CYAN}${BOLD}[*] Preparing to launch Krilin...${NORMAL}"
    
    # Check if core.py exists
    if [ ! -f "core.py" ]; then
        echo -e "${RED}${BOLD}[!] core.py not found in current directory.${NORMAL}"
        echo -e "${YELLOW}${BOLD}[!] Searching for core.py...${NORMAL}"
        
        # Try to find core.py in subdirectories
        CORE_PATH=$(find . -name "core.py" -type f 2>/dev/null | head -1)
        
        if [ -n "$CORE_PATH" ]; then
            echo -e "${GREEN}${BOLD}[+] Found core.py at: ${CORE_PATH}${NORMAL}"
            CD_PATH=$(dirname "$CORE_PATH")
            cd "$CD_PATH" || {
                echo -e "${RED}${BOLD}[!] Failed to navigate to directory containing core.py.${NORMAL}"
                exit 1
            }
        else
            echo -e "${RED}${BOLD}[!] Could not find core.py. Exiting.${NORMAL}"
            exit 1
        fi
    fi
    
    # Make sure we're in the right place by checking for key files
    if [ ! -f "core.py" ]; then
        echo -e "${RED}${BOLD}[!] Not in the correct directory. core.py not found.${NORMAL}"
        exit 1
    fi
    
    # Make the script executable
    chmod +x core.py
    
    # Execute the script
    echo -e "${GREEN}${BOLD}[+] Launching Krilin core module.${NORMAL}"
    echo -ne "${BLUE}"
    for i in $(seq 1 70); do
        echo -ne "═"
        sleep 0.007
    done
    echo -ne "${NORMAL}\n\n"
    
    # Execute krilin core.py with proper environment
    python3 core.py "$@"
    
    # Return code
    RC=$?
    
    echo -ne "\n${BLUE}"
    for i in $(seq 1 70); do
        echo -ne "═"
        sleep 0.005
    done
    echo -ne "${NORMAL}\n"
    
    if [ $RC -eq 0 ]; then
        echo -e "${GREEN}${BOLD}[+] Krilin executed successfully.${NORMAL}"
    else
        echo -e "${RED}${BOLD}[!] Krilin execution failed with return code ${RC}.${NORMAL}"
        echo -e "${YELLOW}${BOLD}[!] Check the logs for more information.${NORMAL}"
    fi
}

# Handle signals for clean exit with better cleanup
cleanup() {
    echo -e "\n${YELLOW}${BOLD}[!] Execution interrupted. Cleaning up...${NORMAL}"
    # Kill any background processes
    jobs -p | xargs -r kill
    exit 1
}

# Set up signal handlers
trap cleanup INT TERM

# Main function with improved flow
main() {
    # Check root privileges
    check_root
    
    # Print banner
    print_banner
    
    # Simulate loading with improved progress bar
    progress_bar 3
    
    # Check git repository
    check_git_repo
    
    # Install dependencies
    install_dependencies
    
    # Display README
    display_readme
    
    # Run Krilin with any command line arguments
    run_krilin "$@"
    
    echo -e "\n${GREEN}${BOLD}[+] Krilin session completed.${NORMAL}"
    echo -e "${CYAN}${BOLD}[*] Thank you for using Krilin Security Framework.${NORMAL}"
}

# Execute main function with all arguments
main "$@"
