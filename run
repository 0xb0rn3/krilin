#!/usr/bin/env bash
# Krilin Security Framework Launcher v0.2
# Enhanced with comprehensive dependency management
# Author: 0xb0rn3

# Exit on error
set -e

# Color definitions
C_RESET="\033[0m"
C_RED="\033[1;31m"
C_GREEN="\033[1;32m"
C_YELLOW="\033[1;33m"
C_BLUE="\033[1;34m"
C_CYAN="\033[1;36m"
C_WHITE="\033[1;37m"
C_MAGENTA="\033[1;35m"

# Log levels 
log_info() { echo -e "${C_CYAN}[INFO]${C_RESET} $1"; }
log_success() { echo -e "${C_GREEN}[OK]${C_RESET} $1"; }
log_warn() { echo -e "${C_YELLOW}[WARN]${C_RESET} $1"; }
log_error() { echo -e "${C_RED}[ERROR]${C_RESET} $1"; }
log_prompt() { echo -ne "${C_YELLOW}[?]${C_RESET} $1"; }

# Spinner animation
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='⣾⣽⣻⢿⡿⣟⣯⣷'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " ${C_CYAN}[%c]${C_RESET} " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar with bc check
progress_bar() {
    local duration=$1
    local width=40
    local progress=0
    
    echo -ne "\n"
    while [ $progress -lt 100 ]; do
        local current=$(( progress * width / 100 ))
        local remainder=$(( width - current ))
        
        # Create progress bar
        local bar=$(printf "%${current}s" | tr ' ' '█')
        local empty=$(printf "%${remainder}s" | tr ' ' '░')
        
        echo -ne "\r${C_BLUE}[${C_CYAN}${bar}${empty}${C_BLUE}] ${C_CYAN}${progress}%${C_RESET}"
        
        # Progress incrementation (fixed for missing bc)
        if command -v bc >/dev/null 2>&1; then
            progress=$(( progress + (RANDOM % 3 + 1) ))
            if [ $progress -gt 100 ]; then progress=100; fi
            sleep $(echo "scale=3; ($duration / 100) * (0.5 + (0.5 * $RANDOM / 32767))" | bc)
        else
            # Fallback without bc
            progress=$(( progress + 2 ))
            if [ $progress -gt 100 ]; then progress=100; fi
            sleep 0.02
        fi
    done
    echo -ne "\n\n"
}

# Check root 
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log_error "Hey $USER, this script must be run as root."
        log_warn "Please run with: sudo ./run in the Krilin's directory. Thanks!"
        exit 1
    fi
}

# Print banner
print_banner() {
    clear
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                                                           ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}██╗  ██╗${C_RED}██████╗ ${C_YELLOW}██╗${C_GREEN}██╗     ${C_BLUE}██╗${C_CYAN}███╗   ██╗${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}█████╔╝ ${C_RED}██████╔╝${C_YELLOW}██║${C_GREEN}██║     ${C_BLUE}██║${C_CYAN}██╔██╗ ██║${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}██║  ██╗${C_RED}██║  ██║${C_YELLOW}██║${C_GREEN}███████╗${C_BLUE}██║${C_CYAN}██║ ╚████║${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║                                                           ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_GREEN}Security Framework v0.2 Latest Stable${C_BLUE}                  ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_WHITE}\"Transform your Debian into a security powerhouse\"${C_BLUE}     ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_MAGENTA}Engineered by 0xbv1(0xb0rn3) IG: theehiv3${C_BLUE}              ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    echo
}

# OS detection and verification
check_os_compatibility() {
    log_info "Checking $USER system compatibility..."
    
    # Detect OS type
    if command -v apt >/dev/null 2>&1 && [ -f /etc/debian_version ]; then
        OS_TYPE="debian"
        log_success "Detected Debian-based system!"
    elif command -v pacman >/dev/null 2>&1; then
        OS_TYPE="arch"
    elif command -v dnf >/dev/null 2>&1 || command -v yum >/dev/null 2>&1; then
        OS_TYPE="redhat"
    else
        OS_TYPE="unsupported"
    fi
    
    # Handle based on OS type
    if [ "$OS_TYPE" = "arch" ]; then
        log_error "Hey $USER, Krilin is STRICTLY NOT DESIGNED for Arch-based systems."
        log_warn "Proceeding may break your system due to incompatible package management."
        log_warn "For Arch-based systems, please use the 'bkygo' project:"
        log_warn "https://github.com/0xb0rn3/bkygo"
        log_warn "Exiting Krilin. Thank you for checking us out!"
        exit 1
    elif [ "$OS_TYPE" = "redhat" ]; then
        log_error "Krilin is not compatible with RedHat/CentOS/Fedora systems."
        log_warn "This tool is designed specifically for Debian-based distributions."
        exit 1
    elif [ "$OS_TYPE" = "unsupported" ]; then
        log_error "Your operating system is not supported by Krilin."
        log_warn "Krilin is designed for Debian-based systems only."
        log_warn "Supported systems: Debian, Ubuntu, Kali, Parrot, Linux Mint"
        exit 1
    fi
}

# Fix critical system dependencies first
fix_critical_dependencies() {
    log_info "Checking and installing critical system dependencies..."
    
    # Critical packages that must be installed first
    CRITICAL_PACKAGES=(
        "bc"                    # Calculator for progress bar
        "curl"                  # For downloading
        "wget"                  # Alternative downloader
        "ca-certificates"       # SSL certificates
        "apt-transport-https"   # HTTPS support for apt
        "software-properties-common" # PPA management
        "lsb-release"          # Linux Standard Base
        "gnupg"                # GPG keys
        "gnupg2"               # GPG2 keys
        "dirmngr"              # GPG key server access
    )
    
    # Update package lists first
    log_info "Updating package lists..."
    apt-get update -qq 2>/dev/null || {
        log_warn "Initial update failed, cleaning apt cache..."
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        apt-get update -qq || log_warn "Update still failing, continuing anyway..."
    }
    
    # Install critical packages one by one
    for package in "${CRITICAL_PACKAGES[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package"; then
            log_info "Installing critical dependency: $package"
            apt-get install -y -qq "$package" 2>/dev/null || {
                log_warn "Failed to install $package, trying with --fix-missing"
                apt-get install -y -qq --fix-missing "$package" 2>/dev/null || {
                    log_warn "$package installation failed, may cause issues"
                }
            }
        fi
    done
    
    log_success "Critical dependencies check completed."
}

# Enhanced repository management
check_git_repo() {
    log_info "Checking for repository updates..."
    
    # Check if git is installed
    if ! command -v git >/dev/null 2>&1; then
        log_info "Git not found, installing..."
        apt-get install -y -qq git 2>/dev/null || {
            log_error "Failed to install git. Cannot proceed."
            exit 1
        }
    fi
    
    # Check if git directory exists
    if [ ! -d ".git" ]; then
        log_warn "Not in a git repository. Checking for krilin folder..."
        
        if [ ! -d "krilin" ]; then
            log_info "Cloning Krilin repository..."
            git clone https://github.com/0xb0rn3/krilin.git &
            spinner $!
            log_success "Repository cloned successfully."
            cd krilin || { 
                log_error "Failed to enter krilin directory."
                exit 1
            }
        else
            log_success "Krilin directory found."
            cd krilin || { 
                log_error "Failed to enter krilin directory."
                exit 1
            }
            
            if [ -d ".git" ]; then
                handle_git_updates
            fi
        fi
    else
        handle_git_updates
    fi
}

# Git updates handling
handle_git_updates() {
    log_info "Checking for updates..."
    
    # Fetch latest without merging first
    git fetch origin main --quiet 2>/dev/null || {
        log_warn "Could not fetch updates, continuing with current version..."
        return 0
    }
    
    # Check if we're behind
    LOCAL=$(git rev-parse HEAD 2>/dev/null || echo "none")
    REMOTE=$(git rev-parse origin/main 2>/dev/null || echo "none")
    
    if [ "$LOCAL" = "$REMOTE" ]; then
        log_success "Repository is up to date."
        return 0
    fi
    
    if [ "$LOCAL" = "none" ] || [ "$REMOTE" = "none" ]; then
        log_warn "Could not determine repository status, continuing..."
        return 0
    fi
    
    log_info "Updates available. Preparing to update..."
    
    # Check for local changes
    if ! git diff --quiet HEAD 2>/dev/null; then
        log_warn "Local changes detected that might conflict with updates."
        
        # Create backup if needed
        if [ -f "run" ] && ! git diff --quiet HEAD -- run 2>/dev/null; then
            BACKUP_FILE="run.backup.$(date +%Y%m%d%H%M%S)"
            log_info "Creating backup of your customized run script to $BACKUP_FILE..."
            cp run "$BACKUP_FILE"
            log_success "Backup created successfully."
        fi
        
        # Stash changes
        log_info "Temporarily saving local changes..."
        git stash save "Automatic stash before updating Krilin" --quiet
        
        # Pull latest changes
        log_info "Pulling latest updates..."
        if git pull origin main --no-edit --quiet 2>/dev/null; then
            log_success "Krilin updated successfully."
            
            # Try to apply stashed changes back
            if git stash list | grep -q "Automatic stash"; then
                log_info "Attempting to restore your customizations..."
                if git stash pop --quiet 2>/dev/null; then
                    log_success "Your customizations were successfully restored."
                else
                    log_warn "Conflicts occurred when restoring your customizations."
                    log_warn "Your changes are saved in the git stash."
                fi
            fi
        else
            log_error "Failed to update repository."
        fi
    else
        # No local changes, safe to update
        log_info "Pulling latest changes..."
        if git pull origin main --no-edit --quiet 2>/dev/null; then
            log_success "Tool updated successfully."
        else
            log_warn "Could not pull updates, continuing with current version..."
        fi
    fi
}

# Generate comprehensive requirements file
generate_requirements() {
    if [ ! -f "requirements.txt" ]; then
        log_info "Creating comprehensive requirements file..."
        cat > requirements.txt << 'EOF'
# Core System Utilities
bc
curl
wget
git
make
cmake
autoconf
automake
libtool
pkg-config

# Build Essentials
build-essential
gcc
g++
gdb
clang

# System Libraries
libssl-dev
libffi-dev
libxml2-dev
libxslt1-dev
zlib1g-dev
libbz2-dev
libreadline-dev
libsqlite3-dev
libncurses5-dev
libncursesw5-dev
xz-utils
tk-dev
libgdbm-dev
libc6-dev
liblzma-dev

# Package Management
apt-transport-https
ca-certificates
gnupg
gnupg2
dirmngr
lsb-release
software-properties-common
dpkg-dev

# Python Core
python3
python3-pip
python3-dev
python3-venv
python3-setuptools
python3-wheel

# Python System Packages
python3-requests
python3-bs4
python3-lxml
python3-urllib3
python3-cryptography
python3-openssl
python3-colorama

# Network Tools
net-tools
nmap
netcat-openbsd
tcpdump
wireshark
tshark
dnsutils
whois
traceroute
mtr
iptables
ufw

# Archive Tools
zip
unzip
p7zip-full
rar
unrar

# Text Processing
jq
xmlstarlet
html2text
pandoc

# Terminal Tools
screen
tmux
htop
ncdu
tree

# Python pip packages
requests
beautifulsoup4
colorama
rich
lxml
pyyaml
python-dotenv
EOF
        log_success "Requirements file created."
    fi
}

# Comprehensive dependency installation
install_dependencies() {
    log_info "Installing comprehensive dependencies..."
    
    # First ensure critical deps are installed
    fix_critical_dependencies
    
    # Generate requirements
    generate_requirements
    
    # Fix any broken packages first
    log_info "Fixing any broken packages..."
    dpkg --configure -a 2>/dev/null || true
    apt-get install -f -y -qq 2>/dev/null || true
    
    # Update package list
    log_info "Updating package lists..."
    apt-get update -qq 2>/dev/null || {
        log_warn "Failed to update package lists. Continuing anyway..."
    }
    
    # Read and categorize packages
    SYS_PKGS=()
    PIP_PKGS=()
    FAILED_PKGS=()
    
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip comments and empty lines
        [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
        
        # Sort packages by type
        if [[ "$line" == python3-* || "$line" == "python3" ]]; then
            SYS_PKGS+=("$line")
        elif [[ "$line" =~ ^[a-z] ]] && [[ ! "$line" =~ ^(requests|beautifulsoup4|colorama|rich|lxml|pyyaml|python-dotenv)$ ]]; then
            SYS_PKGS+=("$line")
        else
            PIP_PKGS+=("$line")
        fi
    done < requirements.txt
    
    # Install system packages in batches
    log_info "Installing system packages (this may take a few minutes)..."
    
    # First pass - try to install all at once
    if [ ${#SYS_PKGS[@]} -gt 0 ]; then
        apt-get install -y -qq "${SYS_PKGS[@]}" 2>/dev/null || {
            log_warn "Batch installation failed, installing packages individually..."
            
            # Second pass - install one by one
            for pkg in "${SYS_PKGS[@]}"; do
                if ! dpkg -l | grep -q "^ii  $pkg"; then
                    if apt-get install -y -qq "$pkg" 2>/dev/null; then
                        log_success "$pkg installed."
                    else
                        log_warn "Failed to install $pkg"
                        FAILED_PKGS+=("$pkg")
                    fi
                fi
            done
        }
    fi
    
    # Setup Python environment
    log_info "Setting up Python environment..."
    
    # Ensure pip is installed and updated
    if command -v python3 >/dev/null 2>&1; then
        # Update pip itself
        python3 -m pip install --upgrade pip 2>/dev/null || {
            log_warn "Could not upgrade pip, using current version"
        }
        
        # Install Python packages
        if [ ${#PIP_PKGS[@]} -gt 0 ]; then
            log_info "Installing Python packages..."
            for pip_pkg in "${PIP_PKGS[@]}"; do
                if ! python3 -m pip show "$pip_pkg" >/dev/null 2>&1; then
                    log_info "Installing Python package: $pip_pkg"
                    python3 -m pip install --quiet --break-system-packages "$pip_pkg" 2>/dev/null || {
                        python3 -m pip install --quiet "$pip_pkg" 2>/dev/null || {
                            log_warn "Failed to install Python package: $pip_pkg"
                            FAILED_PKGS+=("$pip_pkg")
                        }
                    }
                fi
            done
        fi
    else
        log_error "Python3 is not installed properly!"
        exit 1
    fi
    
    # Report any failures
    if [ ${#FAILED_PKGS[@]} -gt 0 ]; then
        log_warn "The following packages failed to install:"
        for pkg in "${FAILED_PKGS[@]}"; do
            echo "  - $pkg"
        done
        log_warn "This may affect some functionality."
    else
        log_success "All dependencies installed successfully!"
    fi
    
    # Clean up
    apt-get autoremove -y -qq 2>/dev/null || true
    apt-get autoclean -qq 2>/dev/null || true
    
    log_success "Dependency installation completed."
}

# Run Krilin core
run_krilin() {
    log_info "Preparing to launch Krilin..."
    
    # Check if core.py exists
    if [ ! -f "core.py" ]; then
        log_warn "core.py not found in current directory."
        
        # Try to find core.py
        CORE_PATH=$(find . -name "core.py" -type f 2>/dev/null | head -1)
        
        if [ -n "$CORE_PATH" ]; then
            log_success "Found core.py at: ${CORE_PATH}"
            CD_PATH=$(dirname "$CORE_PATH")
            cd "$CD_PATH" || {
                log_error "Failed to navigate to directory containing core.py."
                exit 1
            }
        else
            log_error "Could not find core.py. Please ensure you're in the Krilin directory."
            exit 1
        fi
    fi
    
    # Final check for core.py
    if [ ! -f "core.py" ]; then
        log_error "core.py not found. Cannot proceed."
        exit 1
    fi
    
    # Make the script executable
    chmod +x core.py
    
    # Launch separator
    echo
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                   ${C_CYAN}LAUNCHING KRILIN CORE${C_BLUE}                  ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    echo
    
    # Execute core.py with error handling
    if python3 core.py "$@"; then
        RC=0
    else
        RC=$?
    fi
    
    echo
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                    ${C_GREEN}SESSION COMPLETE${C_BLUE}                      ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    
    if [ $RC -eq 0 ]; then
        log_success "Krilin executed successfully."
    else
        log_error "Krilin execution failed with return code ${RC}."
        log_warn "Check the output above for error details."
        log_info "If issues persist, please report at: https://github.com/0xb0rn3/krilin/issues"
    fi
    
    return $RC
}

# Display warning and get confirmation
display_warning() {
    echo
    echo -e "${C_RED}╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_RED}║                                          ${C_YELLOW}⚠️  IMPORTANT WARNING ⚠️${C_RED}                                                  ║${C_RESET}"
    echo -e "${C_RED}╟───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╢${C_RESET}"
    echo -e "${C_RED}║                                                                                                                   ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}Krilin will MODIFY your system by installing Kali Linux tools and/or kernels.${C_RED}                                  ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}This includes adding temporary repositories and installing security testing software.${C_RED}                            ║${C_RESET}"
    echo -e "${C_RED}║                                                                                                                   ║${C_RESET}"
    echo -e "${C_RED}║  ${C_YELLOW}By proceeding you acknowledge that:${C_RED}                                                                            ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}• You have proper authorization to use these tools${C_RED}                                                              ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}• You will use them for legal and ethical purposes only${C_RED}                                                        ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}• You have backups of important data${C_RED}                                                                            ║${C_RESET}"
    echo -e "${C_RED}║  ${C_WHITE}• You accept full responsibility for any system changes${C_RED}                                                        ║${C_RESET}"
    echo -e "${C_RED}║                                                                                                                   ║${C_RESET}"
    echo -e "${C_RED}╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝${C_RESET}"
    echo
    
    log_prompt "Do you understand and accept these terms? (yes/no): "
    read -r answer
    
    if [ "$answer" != "yes" ] && [ "$answer" != "y" ]; then
        log_warn "Installation cancelled. Thank you for using Krilin!"
        exit 0
    fi
    
    log_success "Terms accepted. Proceeding with Krilin initialization..."
}

# Handle cleanup on exit
cleanup() {
    echo
    log_warn "Krilin execution interrupted! Cleaning up..."
    # Kill any background processes
    jobs -p 2>/dev/null | xargs -r kill 2>/dev/null || true
    exit 130
}

# System information display
display_system_info() {
    log_info "System Information:"
    echo -e "${C_CYAN}  OS:${C_RESET} $(lsb_release -ds 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo -e "${C_CYAN}  Kernel:${C_RESET} $(uname -r)"
    echo -e "${C_CYAN}  Architecture:${C_RESET} $(uname -m)"
    echo -e "${C_CYAN}  Python:${C_RESET} $(python3 --version 2>/dev/null || echo 'Not installed')"
    echo -e "${C_CYAN}  Memory:${C_RESET} $(free -h | grep Mem | awk '{print $2 " total, " $3 " used"}')"
    echo -e "${C_CYAN}  Disk:${C_RESET} $(df -h / | tail -1 | awk '{print $2 " total, " $3 " used (" $5 ")"}')"
    echo
}

# Set up signal handlers
trap cleanup INT TERM

# Main function
main() {
    # Initial checks
    check_root
    check_os_compatibility
    
    # Display banner and warning
    print_banner
    display_system_info
    display_warning
    
    # Show progress for initial setup
    log_info "Initializing Krilin Security Framework..."
    progress_bar 2
    
    # Core operations
    check_git_repo
    install_dependencies
    
    # Launch Krilin
    run_krilin "$@"
    
    # Exit message
    echo
    log_success "Thank you for using Krilin Security Framework!"
    log_info "If this tool was helpful, please consider:"
    echo -e "  ${C_YELLOW}⭐${C_RESET} Star the project: ${C_CYAN}https://github.com/0xb0rn3/krilin${C_RESET}"
    echo -e "  ${C_YELLOW}🐛${C_RESET} Report issues: ${C_CYAN}https://github.com/0xb0rn3/krilin/issues${C_RESET}"
    echo -e "  ${C_YELLOW}💬${C_RESET} Join discussions: ${C_CYAN}https://github.com/0xb0rn3/krilin/discussions${C_RESET}"
    echo
}

# Execute main function with all arguments
main "$@"
