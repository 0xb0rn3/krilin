#!/usr/bin/env bash
# Exit on error
set -e

# Color definitions
C_RESET="\033[0m"
C_RED="\033[1;31m"
C_GREEN="\033[1;32m"
C_YELLOW="\033[1;33m"
C_BLUE="\033[1;34m"
C_CYAN="\033[1;36m"
C_WHITE="\033[1;37m"

# Log levels 
log_info() { echo -e "${C_CYAN}[INFO]${C_RESET} $1"; }
log_success() { echo -e "${C_GREEN}[OK]${C_RESET} $1"; }
log_warn() { echo -e "${C_YELLOW}[WARN]${C_RESET} $1"; }
log_error() { echo -e "${C_RED}[ERROR]${C_RESET} $1"; }
log_prompt() { echo -ne "${C_YELLOW}[?]${C_RESET} $1"; }

# Spinner animation
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='⣾⣽⣻⢿⡿⣟⣯⣷'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " ${C_CYAN}[%c]${C_RESET} " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Progress bar
progress_bar() {
    local duration=$1
    local width=40
    local progress=0
    
    echo -ne "\n"
    while [ $progress -lt 100 ]; do
        local current=$(( progress * width / 100 ))
        local remainder=$(( width - current ))
        
        # Create progress bar
        local bar=$(printf "%${current}s" | tr ' ' '█')
        local empty=$(printf "%${remainder}s" | tr ' ' '░')
        
        echo -ne "\r${C_BLUE}[${C_CYAN}${bar}${empty}${C_BLUE}] ${C_CYAN}${progress}%${C_RESET}"
        
        # Progress incrementation
        progress=$(( progress + (RANDOM % 3 + 1) ))
        if [ $progress -gt 100 ]; then progress=100; fi
        sleep $(echo "scale=3; ($duration / 100) * (0.5 + (0.5 * $RANDOM / 32767))" | bc)
    done
    echo -ne "\n\n"
}

# Check root 
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log_error "Hey $USER this script must be run as root."
        log_warn "Please run with: sudo ./run in the Krilin's directory. Thanks!"
        exit 1
    fi
}

# Print banner
print_banner() {
    clear
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                                                           ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}██╗  ██╗${C_RED}██████╗ ${C_YELLOW}██╗${C_GREEN}██╗     ${C_BLUE}██╗${C_CYAN}███╗   ██╗${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}█████╔╝ ${C_RED}██████╔╝${C_YELLOW}██║${C_GREEN}██║     ${C_BLUE}██║${C_CYAN}██╔██╗ ██║${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_CYAN}██║  ██╗${C_RED}██║  ██║${C_YELLOW}██║${C_GREEN}███████╗${C_BLUE}██║${C_CYAN}██║ ╚████║${C_BLUE}        ║${C_RESET}"
    echo -e "${C_BLUE}║                                                           ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_GREEN}Security Framework v0.2 Latest Stable${C_BLUE}                       ║${C_RESET}"
    echo -e "${C_BLUE}║   ${C_WHITE}\"Transform your Debian system into a security powerhouse\"${C_BLUE}  ║${C_RESET}"
    echo -e "${C_BLUE}║  Engineered by 0xbv1(0xb0rn3) IG: theehiv3                                        ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    echo
}

# Repository management
check_git_repo() {
    log_info "Checking for repository updates..."
    
    # Check if git directory exists
    if [ ! -d ".git" ]; then
        log_warn "Not in a git repository. Checking for krilin folder..."
        
        if [ ! -d "krilin" ]; then
            log_info "Cloning Krilin repository..."
            git clone https://github.com/0xb0rn3/krilin.git &
            spinner $!
            log_success "Repository cloned successfully."
            cd krilin || { 
                log_error "Failed to enter krilin directory."
                exit 1
            }
        else
            log_success "Krilin directory found."
            cd krilin || { 
                log_error "Failed to enter krilin directory."
                exit 1
            }
            
            if [ -d ".git" ]; then
                handle_git_updates
            fi
        fi
    else
        handle_git_updates
    fi
}

# Git updates handling
handle_git_updates() {
    log_info "Checking for updates..."
    
    # Fetch latest without merging first
    git fetch origin main --quiet
    
    # Check if we're behind
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/main)
    
    if [ "$LOCAL" = "$REMOTE" ]; then
        log_success "Repository is up to date."
        return 0
    fi
    
    log_info "Some Updates available. Preparing to update..."
    
    # Check for local changes
    if ! git diff --quiet HEAD; then
        log_warn "Local changes detected that might conflict with updates."
        
        # Create backup if needed
        if [ -f "run" ] && ! git diff --quiet HEAD -- run; then
            BACKUP_FILE="run.backup.$(date +%Y%m%d%H%M%S)"
            log_info "Creating backup of your customized run script to $BACKUP_FILE..."
            cp run "$BACKUP_FILE"
            log_success "Backup created successfully."
        fi
        
        # Stash changes
        log_info "Temporarily saving $USER local changes..."
        git stash save "Automatic stash before updating Krilin" --quiet
        
        # Pull latest changes
        log_info "Checking for latest updates from Krilin's repository..."
        if git pull origin main --no-edit --quiet; then
            log_success "Krilin updated successfully."
            
            # Try to apply stashed changes back
            if git stash list | grep -q "Automatic stash"; then
                log_info "Attempting to restore your customizations..."
                if git stash pop --quiet; then
                    log_success "Your customizations were successfully restored."
                else
                    log_warn "Conflicts occurred when restoring your customizations."
                    log_warn "Your changes are saved in the git stash."
                    
                    # Restore from backup if needed
                    if compgen -G "run.backup.*" > /dev/null; then
                        LATEST_BACKUP=$(ls -t run.backup.* | head -1)
                        log_info "Restoring run script from backup: ${LATEST_BACKUP}"
                        cp "$LATEST_BACKUP" run
                        chmod +x run
                        log_success "Run script restored from backup."
                    fi
                fi
            fi
        else
            log_error "Failed to update repository."
            # Restore stashed changes if update failed
            if git stash list | grep -q "Automatic stash"; then
                log_info "Restoring your previous state..."
                git stash pop --quiet
                log_success "Previous state restored."
            fi
        fi
    else
        # No local changes, safe to update
        log_info "Pulling latest changes..."
        if git pull origin main --no-edit --quiet; then
            log_success "Tool updated successfully."
        else
            log_error "Tool update failed! Please check your network connection."
        fi
    fi
}

# Generate requirements file if it doesn't exist
generate_requirements() {
    if [ ! -f "requirements.txt" ]; then
        log_info "Creating requirements file..."
        cat > requirements.txt << EOF
# System packages
apt-transport-https
terminator
gnupg
dpkg-dev
lsb-release
software-properties-common
curl
wget
build-essential
git
make
autoconf

# Python system packages
python3
python3-pip
python3-venv
python3-requests
python3-bs4

# Network tools
nmap
netcat-openbsd
net-tools
wireshark
zenmap

# Python pip packages
requests
beautifulsoup4
colorama
rich
EOF
        log_success "Requirements file created."
    fi
}

# Smart dependency installation with requirements file
install_dependencies() {
    log_info "Installing needed dependencies..."
    generate_requirements
    
    # Update package list with better error handling
    log_info "Updating package lists..."
    if ! apt update -qq; then
        log_warn "Failed to update package lists. Continuing anyway..."
    fi
    
    # Parse requirements file and install packages by type
    SYS_PKGS=()
    PIP_PKGS=()
    
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip comments and empty lines
        [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
        
        # Sort packages by type
        if [[ "$line" == python3-* || "$line" == "python3" ]]; then
            SYS_PKGS+=("$line")
        elif [[ "$line" =~ ^(apt-|dpkg-|lsb-|software-|build-|git|make|autoconf|curl|wget|nmap|netcat-|net-) ]]; then
            SYS_PKGS+=("$line")
        else
            PIP_PKGS+=("$line")
        fi
    done < requirements.txt
    
    # Install system packages if not already installed
    for pkg in "${SYS_PKGS[@]}"; do
        # Check if package is already installed
        if ! dpkg -s "$pkg" >/dev/null 2>&1; then
            log_info "Installing ${pkg}..."
            if apt-get install -y -qq "$pkg" >/dev/null 2>&1; then
                log_success "${pkg} installed."
            else
                log_warn "Failed to install ${pkg}."
            fi
        else
            log_success "${pkg} already installed."
        fi
    done
    
    # Setup Python environment
    log_info "Setting up Python environment..."
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        log_info "Creating virtual environment..."
        python3 -m venv venv
        log_success "Virtual environment created."
    fi
    
    # Install pip packages
    if [ ${#PIP_PKGS[@]} -gt 0 ]; then
        log_info "Installing Python packages..."
        for pip_pkg in "${PIP_PKGS[@]}"; do
            # Check if already installed
            if ! python3 -m pip freeze | grep -q "^${pip_pkg}==" 2>/dev/null; then
                log_info "Installing ${pip_pkg}..."
                if python3 -m pip install --quiet --break-system-packages "$pip_pkg" >/dev/null 2>&1; then
                    log_success "${pip_pkg} installed."
                else
                    log_warn "Failed to install ${pip_pkg}."
                fi
            else
                log_success "${pip_pkg} already installed."
            fi
        done
    fi
    
    log_success "All needed dependencies installed successfully. GREEN FLAG proceeding!"
}

# Improved core.py executor
run_krilin() {
    log_info "Preparing to launch Krilin..."
    
    # Check if core.py exists
    if [ ! -f "core.py" ]; then
        log_warn "core.py not found in current directory."
        
        # Try to find core.py in subdirectories
        CORE_PATH=$(find . -name "core.py" -type f 2>/dev/null | head -1)
        
        if [ -n "$CORE_PATH" ]; then
            log_success "Found core.py at: ${CORE_PATH}"
            CD_PATH=$(dirname "$CORE_PATH")
            cd "$CD_PATH" || {
                log_error "Failed to navigate to directory containing core.py."
                exit 1
            }
        else
            log_error "Could not find core.py. Exiting."
            exit 1
        fi
    fi
    
    # Final check for core.py
    if [ ! -f "core.py" ]; then
        log_error "Not in the correct directory. core.py not found."
        exit 1
    fi
    
    # Make the script executable
    chmod +x core.py
    
    # Launch separator
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                   LAUNCHING CORE                          ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    echo
    
    # Execute core.py
    python3 core.py "$@"
    RC=$?
    
    echo
    echo -e "${C_BLUE}╔═══════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_BLUE}║                    SESSION COMPLETE                       ║${C_RESET}"
    echo -e "${C_BLUE}╚═══════════════════════════════════════════════════════════╝${C_RESET}"
    
    if [ $RC -eq 0 ]; then
        log_success "Krilin executed successfully."
    else
        log_error "Krilin execution failed with return code ${RC}."
        log_warn "Check the logs for more information or contact project maintainer and report error immediately if it persists! THANK YOU!"
    fi
}

# OS detection and verification
check_os_compatibility() {
    log_info "Checking $USER system compatibility..."
    
    # Detect OS type
    if command -v apt >/dev/null 2>&1 && [ -f /etc/debian_version ]; then
        OS_TYPE="debian"
        log_success "Detected Debian-based system!"
    elif command -v pacman >/dev/null 2>&1; then
        OS_TYPE="arch"
    else
        OS_TYPE="unsupported"
    fi
    
    # Handle based on OS type
    if [ "$OS_TYPE" = "arch" ]; then
        log_error "Hey $USER Krilin is STRICTLY NOT DESIGNED for any Arch-based systems."
        log_warn "Proceeding may break your system due to incompatible package management and system handling behaviour."
        log_warn "For Arch-based systems, please use the 'bkygo' project found at: https://github.com/0xb0rn3/bkygo specifially designed for 100% ARCH BASE compatibility"
        log_warn "Exiting Krilin. Thank you for checking us out!"
        exit 1
    elif [ "$OS_TYPE" = "unsupported" ]; then
        log_error "Your operating system is not supported by Krilin."
        log_warn "Krilin is designed for Debian-based systems only. You DO NOT WANT TO MAKE THAT MISTAKE $USER"
        log_warn "Exiting Krilin."
        exit 1
    fi
}

# Display warning and get confirmation
display_warning() {
    echo -e "${C_RED}╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗${C_RESET}"
    echo -e "${C_RED}║                        WARNING! to $USER                                                                           ║${C_RESET}"
    echo -e "${C_RED}║                                                                                                                    ║${C_RESET}"
    echo -e "${C_RED}║  Krilin will HIGHLY MODIFY your system by installing Kali Linux tools and/or kernels from www.kali.org/tools.      ║${C_RESET}"
    echo -e "${C_RED}║   By proceeding you accept full liability for any  damages or issues caused to your system.                        ║${C_RESET}"
    echo -e "${C_RED}║  We also strongly assume and expect you KNOW and UNDERSTAND that this tool is specifically designed for system     ║${C_RESET}"
    echo -e "${C_RED}║       security engineers and Ethical use only and any misuse is on your own and you take full responsibility       ║${C_RESET}"
    echo -e "${C_RED}║                           Also please ensure you have backups before continuing. Cant stress this enough!          ║${C_RESET}"
    echo -e "${C_RED}╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝${C_RESET}"
    echo
    
    log_prompt "Do you understand & fully accept these terms and wish to proceed, $USER? (y/n): "
    read -r answer
    if [ "$answer" != "y" ]; then
        log_warn "Exiting Krilin. Thank you for checking it out! $USER"
        exit 0
    fi
    log_info "Perfect! Now, Proceeding with initialization..."
}

# Handle signals for clean exit
cleanup() {
    echo
    log_warn "KRILIN Execution interrupted! Cleaning up $USER system..."
    # Kill any background processes
    jobs -p | xargs -r kill &>/dev/null
    exit 1
}

# Set up signal handlers
trap cleanup INT TERM

# Main function with improved flow
main() {
    check_root
    check_os_compatibility
    display_warning
    print_banner
    progress_bar 2
    check_git_repo
    install_dependencies
    run_krilin "$@"
    
    log_success "Thank you for using Krilin Security Framework $USER ! A star on GITHUB and a share would be HIGHLY appreciated if the tool was useful to you! - 0xb0rn3 "
}

# Execute main function with all arguments
main "$@"
